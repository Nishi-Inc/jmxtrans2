<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.jmxtrans.jmxtrans2</groupId>
        <artifactId>jmxtrans2</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>jmxtrans2-standalone</artifactId>
    <name>JMXTrans - standalone</name>
    <description>JMX metrics exporter</description>

    <properties>
        <jsw.dir>${project.build.directory}/generated-resources/appassembler/jsw/${package.daemon.name}</jsw.dir>
        <main.class>org.jmxtrans.JmxTransformer</main.class>
        <package.daemon.name>${project.artifactId}d</package.daemon.name>
        <package.group>${project.artifactId}</package.group>
        <package.install.dir>/usr/share/${project.artifactId}</package.install.dir>
        <package.user>${project.artifactId}</package.user>
        <verify.cobertura.totalBranchRate>30</verify.cobertura.totalBranchRate>
        <verify.cobertura.totalLineRate>33</verify.cobertura.totalLineRate>
        <verify.coverage.threshold>83</verify.coverage.threshold>
        <verify.mutation.threshold>26</verify.mutation.threshold>
    </properties>

    <dependencies>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-guava</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-pool</groupId>
            <artifactId>commons-pool</artifactId>
        </dependency>
        <dependency>
            <groupId>info.ganglia.gmetric4j</groupId>
            <artifactId>gmetric4j</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.jpathwatch</groupId>
            <artifactId>jpathwatch</artifactId>
        </dependency>
        <dependency>
            <!-- JEXL support for configurable naming strategy expressions -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-jexl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jrobin</groupId>
            <artifactId>jrobin</artifactId>
        </dependency>
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>annotations</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!--
                There is no compile time dependency on acplt. There might be a runtime dependency that I did not
                identify yet, so let's keep it for the moment. After further analysis, we might be able to remove it.
            -->
            <groupId>org.acplt</groupId>
            <artifactId>oncrpc</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <!--
                There is no compile time dependency on jgit. There might be a runtime dependency that I did not
                identify yet, so let's keep it for the moment. After further analysis, we might be able to remove it.
            -->
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <!-- JSR160 (JMX Remoting) protocol -->
            <!--
                There is no compile time dependency on jboss remoting. There might be a runtime dependency that I did not
                identify yet, so let's keep it for the moment. After further analysis, we might be able to remove it.
            -->
            <groupId>org.jboss.remoting3</groupId>
            <artifactId>remoting-jmx</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <!--
                There is no compile time dependency on jboss remoting. There might be a runtime dependency that I did not
                identify yet, so let's keep it for the moment. After further analysis, we might be able to remove it.
            -->
            <groupId>org.jboss.remotingjmx</groupId>
            <artifactId>remoting-jmx</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <type>jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <type>jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-reflect</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <configuration>
                    <merge>true</merge>
                    <message>Creating site for ${project.name} ${project.version}</message>
                    <path>${project.artifactId}</path>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>all</shadedClassifierName>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>${main.class}</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <?SORTPOM IGNORE?>
            <!-- assembly has to run after shade -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>src/assembly/dist.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
            </plugin>
            <?SORTPOM RESUME?>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <includes>
                        <include>**/Test*.java</include>
                        <include>**/*Test.java</include>
                        <include>**/*TestCase.java</include>
                        <include>**/*Tests.java</include>
                    </includes>
                    <systemPropertyVariables>
                        <org.jmxtrans.log.dir>${project.build.directory}</org.jmxtrans.log.dir>
                        <myhost>w2</myhost>
                        <myport>1099</myport>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <configuration>
                    <daemons>
                        <daemon>
                            <id>${package.daemon.name}</id>
                            <mainClass>${main.class}</mainClass>
                            <commandLineArguments>
                                <commandLineArgument>-j</commandLineArgument>
                                <commandLineArgument>/var/lib/${project.artifactId}</commandLineArgument>
                            </commandLineArguments>
                            <jvmSettings>
                                <extraArguments>
                                    <extraArgument>-Dcom.sun.management.jmxremote</extraArgument>
                                    <extraArgument>-Dcom.sun.management.jmxremote.ssl=false</extraArgument>
                                    <extraArgument>-Dcom.sun.management.jmxremote.authenticate=false</extraArgument>
                                    <extraArgument>-Dcom.sun.management.jmxremote.port=2101</extraArgument>
                                </extraArguments>
                            </jvmSettings>
                            <platforms>
                                <platform>jsw</platform>
                            </platforms>
                            <generatorConfigurations>
                                <generatorConfiguration>
                                    <generator>jsw</generator>
                                    <includes>
                                        <include>linux-x86-32</include>
                                        <include>linux-x86-64</include>
                                    </includes>
                                    <configuration>
                                        <wrapper.pidfile>/var/run/${package.daemon.name}</wrapper.pidfile>
                                        <property>
                                            <name>run.as.user.envvar</name>
                                            <value>${package.user}</value>
                                        </property>
                                        <property>
                                            <name>wrapper.logfile</name>
                                            <value>/var/log/${package.daemon.name}/${project.artifactId}.log</value>
                                        </property>
                                    </configuration>
                                </generatorConfiguration>
                            </generatorConfigurations>
                        </daemon>
                    </daemons>
                    <programs>
                        <program>
                            <mainClass>${main.class}</mainClass>
                            <id>${project.artifactId}</id>
                        </program>
                    </programs>
                </configuration>
                <executions>
                    <execution>
                        <id>appassembler</id>
                        <goals>
                            <goal>assemble</goal>
                            <goal>generate-daemons</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!--
                RPM packaging is done in a profile to ensure that it does not impact build on platforms not supporting
                RPM tools. Once we are happy with how this works, we could probably autoactivate this profile if
                appropriate tools are detected on the system.
            -->
            <id>rpm</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>rpm-maven-plugin</artifactId>
                        <configuration>
                            <group>Applications/Communications</group>
                            <defineStatements>
                                <!--
                                    The package contains Tanukisoft libs for multiple architectures. Multi-arch package
                                    do not exist, so we *should* split this package in a jmxtrans-common package
                                    plus an arch specific package for each architecture, containing only the Tanukisoft
                                    libraries. I think this is overkill, so let's create a non compliant noarch package.
                                -->
                                <defineStatement>_binaries_in_noarch_packages_terminate_build 0</defineStatement>
                            </defineStatements>
                            <preinstallScriptlet>
                                <script>if [ $1 = 1 ]; then
                                    /usr/sbin/useradd -c "${project.name}" -s /bin/sh -r -d \
                                    ${package.install.dir} -U ${package.user}
                                    fi</script>
                            </preinstallScriptlet>
                            <postinstallScriptlet>
                                <script>/sbin/chkconfig --add ${package.daemon.name}</script>
                            </postinstallScriptlet>
                            <preremoveScriptlet>
                                <script>if [ $1 = 0 ]; then
                                    /sbin/service ${package.daemon.name} stop
                                    /sbin/chkconfig --del ${package.daemon.name}
                                    /usr/sbin/userdel ${package.user}
                                    fi</script>
                            </preremoveScriptlet>
                            <requires>
                                <require>java</require>
                            </requires>
                            <mappings>
                                <mapping>
                                    <directory>${package.install.dir}/etc</directory>
                                    <sources>
                                        <source>
                                            <location>${jsw.dir}/etc</location>
                                        </source>
                                    </sources>
                                </mapping>
                                <mapping>
                                    <directory>${package.install.dir}/bin</directory>
                                    <filemode>755</filemode>
                                    <sources>
                                        <source>
                                            <location>${jsw.dir}/bin</location>
                                            <excludes>
                                                <exclude>*.bat</exclude>
                                            </excludes>
                                        </source>
                                    </sources>
                                </mapping>
                                <mapping>
                                    <directory>${package.install.dir}/lib</directory>
                                    <sources>
                                        <source>
                                            <location>${jsw.dir}/lib</location>
                                        </source>
                                    </sources>
                                </mapping>
                                <mapping>
                                    <directory>/usr/bin</directory>
                                    <filemode>755</filemode>
                                    <sources>
                                        <source>
                                            <location>${project.basedir}/bin/</location>
                                        </source>
                                    </sources>
                                </mapping>
                                <mapping>
                                    <directory>/etc/${package.daemon.name}</directory>
                                    <configuration>true</configuration>
                                    <sources>
                                        <softlinkSource>
                                            <location>${package.install.dir}/etc</location>
                                        </softlinkSource>
                                    </sources>
                                </mapping>
                                <mapping>
                                    <directory>/etc/init.d</directory>
                                    <sources>
                                        <softlinkSource>
                                            <location>${package.install.dir}/bin/${package.daemon.name}</location>
                                        </softlinkSource>
                                    </sources>
                                </mapping>
                                <mapping>
                                    <directory>/var/lib/${project.artifactId}</directory>
                                </mapping>
                                <mapping>
                                    <directory>/var/log/${package.daemon.name}</directory>
                                    <username>${package.user}</username>
                                    <groupname>${package.group}</groupname>
                                </mapping>
                                <mapping>
                                    <directory>/var/run/${package.daemon.name}</directory>
                                    <username>${package.user}</username>
                                    <groupname>${package.group}</groupname>
                                </mapping>
                            </mappings>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-rpm</id>
                                <goals>
                                    <goal>attached-rpm</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
